{
    "id": "https://doi.org/10.5281/zenodo.280882",
    "type": "works",
    "attributes": {
        "doi": "10.5281/zenodo.280882",
        "identifier": "https://doi.org/10.5281/zenodo.280882",
        "url": "https://zenodo.org/record/280882",
        "author": [
            {
                "given": "Horia R.",
                "family": "Galea"
            },
            {
                "given": "Dirk",
                "family": "Schories"
            }
        ],
        "title": "Some Hydrozoans (Cnidaria) From Central Chile And The Strait Of Magellan",
        "container-title": "Zenodo",
        "description": "Galea, Horia R., Schories, Dirk (2012): Some hydrozoans (Cnidaria) from Central Chile and the Strait of Magellan. Zootaxa 3296: 19-67, DOI: 10.5281/zenodo.280882",
        "resource-type-subtype": "Journal article",
        "data-center-id": "cern.zenodo",
        "member-id": "cern",
        "resource-type-id": "text",
        "version": null,
        "license": "info:eu-repo/semantics/closedAccess",
        "schema-version": "4",
        "results": [],
        "related-identifiers": [],
        "published": "2012",
        "registered": "2017-02-09T04:17:01.000Z",
        "checked": null,
        "updated": "2019-08-02T13:55:29.000Z",
        "media": [],
        "xml": ""
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "cern.zenodo",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "cern",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "text",
                "type": "resource-types"
            }
        }
    }
}