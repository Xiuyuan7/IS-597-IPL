{
    "id": "https://doi.org/10.5281/zenodo.215502",
    "type": "works",
    "attributes": {
        "doi": "10.5281/zenodo.215502",
        "identifier": "https://doi.org/10.5281/zenodo.215502",
        "url": "https://zenodo.org/record/215502",
        "author": [
            {
                "given": "Thomas A.",
                "family": "Munroe"
            }
        ],
        "title": "The Spotted Flounder, Azygopus Flemingi Nielsen 1961 (Pisces: Pleuronectiformes: Rhombosoleidae), From Deep Waters Off New Zealand: A Second Valid Species Of Azygopus Norman 1926, With Notes On Distribution, Size, Maturity, And Ecology",
        "container-title": "Zenodo",
        "description": "Munroe, Thomas A. (2012): The spotted flounder, Azygopus flemingi Nielsen 1961 (Pisces: Pleuronectiformes: Rhombosoleidae), from deep waters off New Zealand: a second valid species of Azygopus Norman 1926, with notes on distribution, size, maturity, and ecology. Zootaxa 3297: 1-33, DOI: 10.5281/zenodo.215502",
        "resource-type-subtype": "Journal article",
        "data-center-id": "cern.zenodo",
        "member-id": "cern",
        "resource-type-id": "text",
        "version": null,
        "license": "info:eu-repo/semantics/closedAccess",
        "schema-version": "4",
        "results": [],
        "related-identifiers": [],
        "published": "2012",
        "registered": "2016-12-21T11:11:40.000Z",
        "checked": null,
        "updated": "2019-08-02T13:30:13.000Z",
        "media": [],
        "xml": ""
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "cern.zenodo",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "cern",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "text",
                "type": "resource-types"
            }
        }
    }
}