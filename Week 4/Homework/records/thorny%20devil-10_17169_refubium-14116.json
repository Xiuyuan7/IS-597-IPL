{
    "id": "https://doi.org/10.17169/refubium-14116",
    "type": "works",
    "attributes": {
        "doi": "10.17169/refubium-14116",
        "identifier": "https://doi.org/10.17169/refubium-14116",
        "url": "https://refubium.fu-berlin.de/handle/fub188/9918",
        "author": [
            {
                "given": "Martin",
                "family": "Kutz"
            }
        ],
        "title": "The Angel Problem, Positional Games, and Digraph Roots",
        "container-title": "Freie Universit\u00e4t Berlin",
        "description": "Prologue Cover Preface iii Table of Contents v 1 The Angel Problem 1 1.1 Angels, Kings, and Fools 1 1.2 From Finite to Infinite Games 5 1.3 The Need for Speed 6 1.4 Catching a (2-\u03b5)-King 12 1.5 An Escape into Space 19 2 Weak Positional Games 29 2.1 Tic-Tac-Toe 29 2.2 Winning Ways 33 2.3 Decomposing Hypergraphs 37 2.4 Between the Docks 42 2.5 Playing for Breaker 54 2.6 Almost-Disjointness 62 2.7 Comparing Games 64 3 Digraph Roots 71 3.1 Matrices and Digraphs, Powers and Roots 71 3.2 NP-Completeness 74 3.3 Roots and Isomorphism 77 Bibliography 89 Zusammenfassung 91",
        "resource-type-subtype": "Dissertation",
        "data-center-id": "tib.fuub",
        "member-id": "tib",
        "resource-type-id": "other",
        "version": null,
        "license": "http://www.fu-berlin.de/sites/refubium/rechtliches/Nutzungsbedingungen",
        "schema-version": "3",
        "results": [],
        "related-identifiers": [],
        "published": "2004",
        "registered": "2019-09-11T13:38:07.000Z",
        "checked": null,
        "updated": "2019-09-11T19:36:09.000Z",
        "media": [],
        "xml": ""
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "tib.fuub",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "tib",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "other",
                "type": "resource-types"
            }
        }
    }
}