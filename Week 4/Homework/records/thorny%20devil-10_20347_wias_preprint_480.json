{
    "id": "https://doi.org/10.20347/wias.preprint.480",
    "type": "works",
    "attributes": {
        "doi": "10.20347/wias.preprint.480",
        "identifier": "https://doi.org/10.20347/wias.preprint.480",
        "url": "http://www.wias-berlin.de/publications/wias-publ/run.jsp?template=abstract&type=Preprint&year=1999&number=480",
        "author": [
            {
                "given": "Brian",
                "family": "Coffey"
            },
            {
                "given": "John G. M.",
                "family": "Schoenmakers"
            }
        ],
        "title": "LIBOR rate models, related derivatives and model calibration",
        "container-title": "Weierstrass Institute",
        "description": "Based on Jamshidians framework a general strategy for the quasi-analytical valuation of large classes of LIBOR derivatives will be developed. As a special case we will address the quasi-analytical approximation formula for swaptions of Brace Gatarek and Musiela and show that a similar formula can be derived with Jamshidian's methods as well. As further applications we will study the  callable reverse floater and the trigger swap. Then, we will study the thorny issues around simultaneous calibration of (low factor) LIBOR models to cap(let) and swaption prices in the markets. We will argue that a low factor market model cannot be calibrated to these prices in a stable way and propose an, in fact, many factor model with only the same number of loading parameters as a two factor model, but, with much better stability properties.",
        "resource-type-subtype": null,
        "data-center-id": "tib.wias",
        "member-id": "tib",
        "resource-type-id": "text",
        "version": null,
        "license": null,
        "schema-version": null,
        "results": [],
        "related-identifiers": [],
        "published": "1999",
        "registered": "2018-07-27T14:37:19.000Z",
        "checked": null,
        "updated": "2019-09-27T23:02:33.000Z",
        "media": [],
        "xml": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtMyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtMyBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC0zL21ldGFkYXRhLnhzZCI+CiAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9IkRPSSI+MTAuMjAzNDcvV0lBUy5QUkVQUklOVC40ODA8L2lkZW50aWZpZXI+CiAgPGNyZWF0b3JzPgogICAgPGNyZWF0b3I+CiAgICAgIDxjcmVhdG9yTmFtZT5Db2ZmZXksIEJyaWFuPC9jcmVhdG9yTmFtZT4KICAgIDwvY3JlYXRvcj4KICAgIDxjcmVhdG9yPgogICAgICA8Y3JlYXRvck5hbWU+U2Nob2VubWFrZXJzLCBKb2huIEcuIE0uPC9jcmVhdG9yTmFtZT4KICAgIDwvY3JlYXRvcj4KICA8L2NyZWF0b3JzPgogIDx0aXRsZXM+CiAgICA8dGl0bGU+TElCT1IgcmF0ZSBtb2RlbHMsIHJlbGF0ZWQgZGVyaXZhdGl2ZXMgYW5kIG1vZGVsIGNhbGlicmF0aW9uPC90aXRsZT4KICA8L3RpdGxlcz4KICA8cHVibGlzaGVyPldlaWVyc3RyYXNzIEluc3RpdHV0ZTwvcHVibGlzaGVyPgogIDxwdWJsaWNhdGlvblllYXI+MTk5OTwvcHVibGljYXRpb25ZZWFyPgogIDxzdWJqZWN0cz4KICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPkludGVyZXN0IHJhdGUgbW9kZWxsaW5nPC9zdWJqZWN0PgogICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+TElCT1IgbW9kZWxzPC9zdWJqZWN0PgogICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+TElCT1IgZGVyaXZhdGl2ZXM8L3N1YmplY3Q+CiAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5hcmJpdHJhZ2U8L3N1YmplY3Q+CiAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5zZW1pLS1tYXJ0aW5nYWxlIHRoZW9yeTwvc3ViamVjdD4KICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Ik1TQzE5OTAiIHNjaGVtZVVSST0iaHR0cDovL3d3dy5hbXMub3JnL21zYy9tc2MxOTkwLmh0bWwiPjYwSDA1PC9zdWJqZWN0PgogICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0iTVNDMTk5MCIgc2NoZW1lVVJJPSJodHRwOi8vd3d3LmFtcy5vcmcvbXNjL21zYzE5OTAuaHRtbCI+NjBIMTA8L3N1YmplY3Q+CiAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJNU0MxOTkwIiBzY2hlbWVVUkk9Imh0dHA6Ly93d3cuYW1zLm9yZy9tc2MvbXNjMTk5MC5odG1sIj45MEEwOTwvc3ViamVjdD4KICA8L3N1YmplY3RzPgogIDxsYW5ndWFnZT5FTkc8L2xhbmd1YWdlPgogIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iVGV4dCIvPgogIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJJU1NOIiByZWxhdGlvblR5cGU9IkNpdGVzIj4wOTQ2LTg2MzM8L3JlbGF0ZWRJZGVudGlmaWVyPgogIDwvcmVsYXRlZElkZW50aWZpZXJzPgogIDxmb3JtYXRzPgogICAgPGZvcm1hdD5QREY8L2Zvcm1hdD4KICA8L2Zvcm1hdHM+CiAgPGRlc2NyaXB0aW9ucz4KICAgIDxkZXNjcmlwdGlvbiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij48IVtDREFUQVtCYXNlZCBvbiBKYW1zaGlkaWFucyBmcmFtZXdvcmsgYSBnZW5lcmFsIHN0cmF0ZWd5IGZvciB0aGUgcXVhc2ktYW5hbHl0aWNhbCB2YWx1YXRpb24gb2YgbGFyZ2UgY2xhc3NlcyBvZiBMSUJPUiBkZXJpdmF0aXZlcyB3aWxsIGJlIGRldmVsb3BlZC4gQXMgYSBzcGVjaWFsIGNhc2Ugd2Ugd2lsbCBhZGRyZXNzIHRoZSBxdWFzaS1hbmFseXRpY2FsIGFwcHJveGltYXRpb24gZm9ybXVsYSBmb3Igc3dhcHRpb25zIG9mIEJyYWNlIEdhdGFyZWsgYW5kIE11c2llbGEgYW5kIHNob3cgdGhhdCBhIHNpbWlsYXIgZm9ybXVsYSBjYW4gYmUgZGVyaXZlZCB3aXRoIEphbXNoaWRpYW4ncyBtZXRob2RzIGFzIHdlbGwuIEFzIGZ1cnRoZXIgYXBwbGljYXRpb25zIHdlIHdpbGwgc3R1ZHkgdGhlICBjYWxsYWJsZSByZXZlcnNlIGZsb2F0ZXIgYW5kIHRoZSB0cmlnZ2VyIHN3YXAuIFRoZW4sIHdlIHdpbGwgc3R1ZHkgdGhlIHRob3JueSBpc3N1ZXMgYXJvdW5kIHNpbXVsdGFuZW91cyBjYWxpYnJhdGlvbiBvZiAobG93IGZhY3RvcikgTElCT1IgbW9kZWxzIHRvIGNhcChsZXQpIGFuZCBzd2FwdGlvbiBwcmljZXMgaW4gdGhlIG1hcmtldHMuIFdlIHdpbGwgYXJndWUgdGhhdCBhIGxvdyBmYWN0b3IgbWFya2V0IG1vZGVsIGNhbm5vdCBiZSBjYWxpYnJhdGVkIHRvIHRoZXNlIHByaWNlcyBpbiBhIHN0YWJsZSB3YXkgYW5kIHByb3Bvc2UgYW4sIGluIGZhY3QsIG1hbnkgZmFjdG9yIG1vZGVsIHdpdGggb25seSB0aGUgc2FtZSBudW1iZXIgb2YgbG9hZGluZyBwYXJhbWV0ZXJzIGFzIGEgdHdvIGZhY3RvciBtb2RlbCwgYnV0LCB3aXRoIG11Y2ggYmV0dGVyIHN0YWJpbGl0eSBwcm9wZXJ0aWVzLl1dPjwvZGVzY3JpcHRpb24+CiAgPC9kZXNjcmlwdGlvbnM+CjwvcmVzb3VyY2U+"
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "tib.wias",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "tib",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "text",
                "type": "resource-types"
            }
        }
    }
}