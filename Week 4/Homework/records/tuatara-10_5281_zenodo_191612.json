{
    "id": "https://doi.org/10.5281/zenodo.191612",
    "type": "works",
    "attributes": {
        "doi": "10.5281/zenodo.191612",
        "identifier": "https://doi.org/10.5281/zenodo.191612",
        "url": "https://zenodo.org/record/191612",
        "author": [
            {
                "given": "Daniel",
                "family": "Gonz\u00e1lez-Acu\u00f1a"
            },
            {
                "given": "Fabiola",
                "family": "Cerda"
            },
            {
                "given": "Juana",
                "family": "L\u00f3pez"
            },
            {
                "given": "Ren\u00e9",
                "family": "Ortega"
            },
            {
                "given": "Christian",
                "family": "Mathieu"
            },
            {
                "given": "Mike",
                "family": "Kinsella"
            }
        ],
        "title": "Checklist Of The Helminths Of The Kelp Gull, Larus Dominicanus (Aves: Laridae), With New Records From Chile",
        "container-title": "Zenodo",
        "description": "Gonz\u00e1lez-Acu\u00f1a, Daniel, Cerda, Fabiola, L\u00f3pez, Juana, Ortega, Ren\u00e9, Mathieu, Christian, Kinsella, Mike (2009): Checklist of the helminths of the kelp gull, Larus dominicanus (Aves: Laridae), with new records from Chile. Zootaxa 2297: 27-43, DOI: 10.5281/zenodo.191612",
        "resource-type-subtype": "Journal article",
        "data-center-id": "cern.zenodo",
        "member-id": "cern",
        "resource-type-id": "text",
        "version": null,
        "license": "info:eu-repo/semantics/closedAccess",
        "schema-version": "4",
        "results": [],
        "related-identifiers": [],
        "published": "2009",
        "registered": "2016-12-01T08:04:24.000Z",
        "checked": null,
        "updated": "2019-08-02T13:25:07.000Z",
        "media": [],
        "xml": ""
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "cern.zenodo",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "cern",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "text",
                "type": "resource-types"
            }
        }
    }
}