{
    "id": "https://doi.org/10.5281/zenodo.203775",
    "type": "works",
    "attributes": {
        "doi": "10.5281/zenodo.203775",
        "identifier": "https://doi.org/10.5281/zenodo.203775",
        "url": "https://zenodo.org/record/203775",
        "author": [
            {
                "given": "Allen C. G.",
                "family": "Heath"
            },
            {
                "given": "Ricardo L.",
                "family": "Palma"
            },
            {
                "given": "Rachel P.",
                "family": "Cane"
            },
            {
                "given": "Scott",
                "family": "Hardwick"
            }
        ],
        "title": "Checklist Of New Zealand Ticks (Acari: Ixodidae, Argasidae)",
        "container-title": "Zenodo",
        "description": "Heath, Allen C. G., Palma, Ricardo L., Cane, Rachel P., Hardwick, Scott (2011): Checklist of New Zealand ticks (Acari: Ixodidae, Argasidae). Zootaxa 2995: 55-63, DOI: 10.5281/zenodo.203775",
        "resource-type-subtype": "Journal article",
        "data-center-id": "cern.zenodo",
        "member-id": "cern",
        "resource-type-id": "text",
        "version": null,
        "license": "info:eu-repo/semantics/closedAccess",
        "schema-version": "4",
        "results": [],
        "related-identifiers": [],
        "published": "2011",
        "registered": "2016-12-15T06:39:14.000Z",
        "checked": null,
        "updated": "2019-08-02T13:22:48.000Z",
        "media": [],
        "xml": ""
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "cern.zenodo",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "cern",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "text",
                "type": "resource-types"
            }
        }
    }
}