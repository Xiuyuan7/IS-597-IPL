{
    "id": "https://doi.org/10.5281/zenodo.211734",
    "type": "works",
    "attributes": {
        "doi": "10.5281/zenodo.211734",
        "identifier": "https://doi.org/10.5281/zenodo.211734",
        "url": "https://zenodo.org/record/211734",
        "author": [
            {
                "given": "Aaron M.",
                "family": "Bauer"
            },
            {
                "given": "Todd R.",
                "family": "Jackman"
            },
            {
                "given": "Ross A.",
                "family": "Sadlier"
            },
            {
                "given": "Anthony H.",
                "family": "Whitaker"
            }
        ],
        "title": "Revision Of The Giant Geckos Of New Caledonia (Reptilia: Diplodactylidae: Rhacodactylus)",
        "container-title": "Zenodo",
        "description": "Bauer, Aaron M., Jackman, Todd R., Sadlier, Ross A., Whitaker, Anthony H. (2012): Revision of the giant geckos of New Caledonia (Reptilia: Diplodactylidae: Rhacodactylus). Zootaxa 3404: 1-52, DOI: 10.5281/zenodo.211734",
        "resource-type-subtype": "Journal article",
        "data-center-id": "cern.zenodo",
        "member-id": "cern",
        "resource-type-id": "text",
        "version": null,
        "license": "info:eu-repo/semantics/closedAccess",
        "schema-version": "4",
        "results": [],
        "related-identifiers": [],
        "published": "2012",
        "registered": "2016-12-20T07:35:04.000Z",
        "checked": null,
        "updated": "2019-08-02T13:12:25.000Z",
        "media": [],
        "xml": ""
    },
    "relationships": {
        "data-center": {
            "data": {
                "id": "cern.zenodo",
                "type": "data-centers"
            }
        },
        "member": {
            "data": {
                "id": "cern",
                "type": "members"
            }
        },
        "resource-type": {
            "data": {
                "id": "text",
                "type": "resource-types"
            }
        }
    }
}